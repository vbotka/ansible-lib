---
# All rights reserved (c) 2020-2025, Vladimir Botka <vbotka@gmail.com>
# Simplified BSD License, https://opensource.org/licenses/BSD-2-Clause
# SPDX-License-Identifier: BSD-2-Clause

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# ansible_lib: al_sanity_platform
#
# Description:
#
#   Test whether the platform and version is supported by the role.  Test whether the
#   platform and version is supported or not. By default print error message and fail if
#   the platform and/or version is not supported. Optionally end the host or print warning
#   only and continue play. See the parameters below.
#
# Input:
#
#   galaxy_info .......................... Meta data
#   al_sanity_role_name .................. Name of the role
#   al_sanity_platform_gather_subset ..... Collect minimal subset by setup
#   al_sanity_platform_fail .............. Fail when platform not supported
#   al_sanity_platform_version_fail ...... Fail when version not supported
#   al_sanity_platform_end_host .......... End host when platform not supported
#   al_sanity_platform_version_end_host .. End host when version not supported
#   al_sanity_platform_warning ........... Print warning when platform or
#                                          version not supported. Continue play.
#   al_supported_versions_override ....... Override meta platform versions.
#                                          Galaxy does not always enable
#                                          supported OS versions in time
#
# Output: None
#
# Example:
#
#   Do not collect minimal subset by setup (variables ansible_distribution_* have already
#   been collected). End host when platform is not supported. Ignore version. Print
#   warning. Print debug messages. Override supported platform versions.
#
#   vars:
#     al_debug: True
#     al_sanity_platform_gather_subset: False
#     al_sanity_platform_fail: False
#     al_sanity_platform_version_fail: False
#     al_sanity_platform_end_host: True
#     al_sanity_platform_version_end_host: False
#     al_supported_versions_override: ['11.3', '11.4', '12.0', '12.1', '12.2']
#   tasks:
#     - include_vars:
#         file: meta/main.yml
#       when: galaxy_info is undefined
#     - set_fact:
#         al_sanity_role_name: "{{ role_name }}"
#     - include_role:
#         name: vbotka.ansible_lib
#         tasks_from: al_sanity_platform
#
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# https://github.com/vbotka/ansible-lib/tasks/al_sanity_platform.yml

- name: "Al_sanity_platform: Fail when galaxy_info not defined."
  when: galaxy_info is undefined
  ansible.builtin.fail:
    msg: "[ERR] Mandatory variable galaxy_info not defined."

- name: "Al_sanity_platform: Fail when al_sanity_role_name not defined."
  when: al_sanity_role_name is undefined
  ansible.builtin.fail:
    msg: "[ERR] Mandatory variable al_sanity_role_name not defined."

- name: "Al_sanity_platform: Setup. Collect minimal subset."
  when: al_sanity_platform_gather_subset | bool
  ansible.builtin.setup:
    gather_subset:
      - "!all"

- name: "Al_sanity_platform: Get supported platforms."
  ansible.builtin.set_fact:
    al_supported_platforms: "{{ galaxy_info.platforms | json_query(_query) }}"
  vars:
    _query: "[].name"

- name: "Al_sanity_platform: Get supported versions of {{ ansible_distribution }}."
  vars:
    _query: "[?name == '{{ ansible_distribution }}'].versions"
  ansible.builtin.set_fact:
    al_supported_versions: "{{ galaxy_info.platforms | json_query(_query)
                                                     | flatten | map('quote') | list }}"

- name: "Al_sanity_platform: Set test variables."
  ansible.builtin.include_tasks:
    file: fn/al_include_sanity_platform_test_vars.yml

# Debug - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

- name: "Al_sanity_platform: Debug. Print variables."
  when: al_debug | bool
  vars:
    msg: |-
      ansible_distribution: {{ ansible_distribution }}
      ansible_distribution_major_version: {{ ansible_distribution_major_version }}
      ansible_distribution_version: {{ ansible_distribution_version }}
      ansible_distribution_release: {{ ansible_distribution_release }}
      ansible_python_version: {{ ansible_python_version }}

      al_sanity_platform_test: {{ al_sanity_platform_test }}
      al_sanity_platform_version_test: {{ al_sanity_platform_version_test }}

      al_sanity_role_name: {{ al_sanity_role_name }}
      al_supported_platforms: {{ al_supported_platforms }}
      al_supported_versions: {{ al_supported_versions }}
      al_supported_versions_override: {{ al_supported_versions_override }}

      al_sanity_platform_gather_subset: {{ al_sanity_platform_gather_subset }}
      al_sanity_platform_fail: {{ al_sanity_platform_fail }}
      al_sanity_platform_version_fail: {{ al_sanity_platform_version_fail }}
      al_sanity_platform_end_host: {{ al_sanity_platform_end_host }}
      al_sanity_platform_version_end_host: {{ al_sanity_platform_version_end_host }}
      al_sanity_platform_warning: {{ al_sanity_platform_warning }}

      galaxy_info.platforms:
        {{ galaxy_info.platforms | to_nice_yaml(indent=2) | indent(2) }}
  ansible.builtin.debug:
    msg: "{{ '{}'.format(msg) }}"

# Test platform - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# ERROR. Fail.
- name: "Al_sanity_platform: Print ERROR platform not supported. Fail."
  when:
    - al_sanity_platform_test not in al_supported_platforms
    - al_sanity_platform_fail | bool
  ansible.builtin.fail:
    msg: >-
      [ERR] platform {{ al_sanity_platform_test }}
      not supported by role {{ al_sanity_role_name }}

# ERROR. End host.
- name: Platform not supported. End host.
  when:
    - al_sanity_platform_test not in al_supported_platforms
    - al_sanity_platform_end_host | bool
  block:

    - name: "Al_sanity_platform: Print ERROR platform not supported. End host."
      ansible.builtin.debug:
        msg: >-
          [ERR] platform {{ al_sanity_platform_test }}
          not supported by role {{ al_sanity_role_name }}. End host.

    - name: "Al_sanity_platform: End_host."
      ansible.builtin.meta: end_host

# WARNING
- name: "Al_sanity_platform: Print WARNING platform not supported."
  when:
    - al_sanity_platform_test not in al_supported_platforms
    - al_sanity_platform_warning | bool
  ansible.builtin.debug:
    msg: >-
      [WARNING] {{ al_sanity_platform_test }}
      not supported by role {{ al_sanity_role_name }}

# Test platform version - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# ERROR. Fail.
- name: "Al_sanity_platform: Print ERROR version not supported. Fail."
  when:
    - al_sanity_platform_version_test not in al_supported_versions
    - al_sanity_platform_version_test not in al_supported_versions_override
    - al_sanity_platform_version_fail | bool
  ansible.builtin.fail:
    msg: >-
      [ERR] version {{ al_sanity_platform_version_test }}
      not supported by role {{ al_sanity_role_name }}

# ERROR. End host.
- name: Version not supported. End host.
  when:
    - al_sanity_platform_version_test not in al_supported_versions
    - al_sanity_platform_version_test not in al_supported_versions_override
    - al_sanity_platform_version_end_host | bool
  block:

    - name: "Al_sanity_platform: Print ERROR version not supported. End host."
      ansible.builtin.debug:
        msg: >-
          [ERROR] version {{ al_sanity_platform_version_test }}
          not supported by role {{ al_sanity_role_name }}. End host.

    - name: "Al_sanity_platform: End_host."
      ansible.builtin.meta: end_host

# WARNING
- name: "Al_sanity_platform: Print WARNING version not supported."
  when:
    - al_sanity_platform_version_test not in al_supported_versions
    - al_sanity_platform_version_test not in al_supported_versions_override
    - al_sanity_platform_warning | bool
  ansible.builtin.debug:
    msg: >-
      [WARNING] version {{ al_sanity_platform_version_test }}
      not supported by role {{ al_sanity_role_name }}

# Pass debug
- name: "Al_sanity_platform: Debug. Test supported platform and version passed."
  when: al_debug | bool
  ansible.builtin.debug:
    msg: >-
      Role {{ al_sanity_role_name }} test supported platform
      {{ al_sanity_platform_test }} {{ al_sanity_platform_version_test }} passed.

# EOF
...
